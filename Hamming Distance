The Hamming distance between two integers is the number of positions at which the corresponding bits are different.
Given two integers x and y, calculate the Hamming distance.
Note:
0 ≤ x, y < 2'31. 
Example: 
Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.

Solution:
public int hammingDistance(int x, int y) {
        return Integer.bitCount(x ^ y);
    }

"karolin" and "kathrin" is 3.
"karolin" and "kerstin" is 3.
1011101 and 1001001 is 2.
2173896 and 2233796 is 3.
The minimum distance between any two vertices is the Hamming distance between the two binary strings.

bitCount原理说明:二分法
public static int bitCount(int i) {  
i = i - ((i >>> 1) & 0x55555555);  55555555共32位，16个0，16个1交替出现，移位运算符总共也是32位
i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);  
i = (i + (i >>> 4)) & 0x0f0f0f0f;  
i = i + (i >>> 8);  
i = i + (i >>> 16);  
return i & 0x3f;  计算i与0x3f两个数字的二进制表示中，有多少位两个都是1
   }  

逐位与运算符&
int s=9&12 ---return:8
int s=1&15 ---return:1

9: 01001
12:01100
only when both are 1, the result returns 1, else all 0
so:01000 which convert into interger would be 8

二进制转十进制时，倒序相加，如8=1000
0x2'0+0x2'1+0x2'2+1x2'3=2'3=8

s=x>>n, 右移运算符，将x转换为二进制后所有位数右移n位，x为正时用0补足，为负时用1补足，相当于x除以2(左移相当于x乘以2)
s=x>>>n,右移运算符，将x转换为二进制后所有位数右移n位，x为正时用0补足，为负时也用0补足
返回结果为二进制转换后的十进制数字

0x代表16进制
0x55555555等都表示16进制的数字
F = 0x55555555 = 01010101010101010101010101010101
T = 0x33333333 = 00110011001100110011001100110011
O = 0x0f0f0f0f = 00001111000011110000111100001111

二进制binary system
八进制oct
十进制decimal system
十六进制hex
